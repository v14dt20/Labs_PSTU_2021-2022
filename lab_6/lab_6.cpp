#include <iostream>
#include <vector>
#include <algorithm>
#include <string.h>

using namespace std;

void upgrade_str(char*);

int main()
{
    char s[255];//массив символов, хранящий исходну строку со словами
    gets(s);

    upgrade_str(s);

    return 0;
}


//====================================определение ф-ий========================


void upgrade_str(char* s)
{
    int space[255];//массив хранит индекс каждого пробела перед словом
    
    //строки содержащие разрешённые символы
    string numbers = "1234567890";
    string letters = " QqWwEeRrTtYyUuIiOoPpAaSsDdFfGgHhJjKkLlZzXxCcVvBbNnMmЙйЦцУуКкЕеНнГгШшЩщЗзХхЪъФфЫыВвАаПпРрОоЛлДдЖжЭэЯяЧчСсМмИиТтЬьБбЮю";

    int j = 0;
    int count_space = 0;//кол-во пробелов(слов) в исходной строке
    for (int i = 0; i < strlen(s); i++)//поиск пробелов и запись в массив
    {
        if (s[i] == ' ' && s[i+1] != ' ')
        {
            space[j] = i;
            j++;
            count_space++;
        }
    }

    int buf_space = 0;//нужна для отделения 2 слов пробелами
    j = 0;
    while (true)//цикл, пробегающийся по всем словам исходной строки
    {
        for (int i = buf_space; i < space[j]; i++)//от последнего пробела до следующего выполнятся цикл
        {
            for (int k = 0; k < numbers.length(); k++)//проверяем каждую цифру на соответствие с данным символом
            {
                if (s[i] == numbers[k])//если символ встретился в массиве цифр, то выводим его и выходим из цикла, иначе ничего не делаем
                {
                    cout << s[i];
                    break;
                }
            }

            for (int k = 0; k < letters.length(); k++)//проверяем каждую букву на соответствие с данным символом
            {
                if (s[i] == letters[k])//если символ встретился в массиве букв, то выводим его и выходим из цикла, иначе ничего не делаем
                {
                    cout << s[i];
                    break;
                }
            }
        }
        
        buf_space = space[j];//присваиваем левому пробелу индекс правого
        j++;//переходим к следущему правому пробелу
        if (j == count_space)//если пробелы кончились, выходим из основного цикла
            break;
    }
}